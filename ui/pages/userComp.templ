package pages

import (
	"strconv"
	"strings"
	"zonaquant/models/uimodels"
)

templ UserItem(user uimodels.UIuser) {
	<li class="col-span-1 divide-y divide-neutral-200 rounded-lg bg-white shadow">
		<div class="flex w-full items-center justify-between space-x-6 p-6">
			<div class="flex-1 truncate">
				<div class="flex items-center space-x-3">
					<h3 class="truncate text-sm font-medium text-neutral-900">{ user.FullName }</h3>
					<span class="inline-flex flex-shrink-0 items-center rounded-full bg-green-50 px-1.5 py-0.5 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
						{ user.Role }
					</span>
				</div>
				<p class="mt-1 truncate text-sm text-neutral-500">{ user.Username }</p>
			</div>
			<div class="flex items-center gap-1 ">
				<img class="h-10 w-10 flex-shrink-0 rounded-full bg-neutral-300" src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60" alt=""/>
				<div class="relative ml-auto" x-data="{open:false}">
					<button
						@Click="open=!open"
						type="button"
						class="inline-flex size-8 items-center justify-center rounded-full bg-transparent bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
					>
						<span class="sr-only">Open options</span>
						<svg class="size-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
							<path d="M10 3a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM10 8.5a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM11.5 15.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0Z"></path>
						</svg>
					</button>
					<div x-show="open" @click.outside="open=false" x-transition class="absolute right-0 z-10 mt-0.5 w-32 origin-top-right rounded-md bg-white py-2 shadow-lg ring-1 ring-gray-900/5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="options-menu-0-button" tabindex="-1">
						<a
							hx-get={ "/resetpass/" + strconv.FormatUint(user.ID, 10) }
							hx-target="#notiRegion"
							class="block px-3 py-1 text-sm/6 text-gray-700 cursor-pointer hover:bg-neutral-300"
							@click="open=false;infoOpen=true"
							role="menuitem"
							tabindex="-1"
							id="options-menu-0-item-2"
						>
							Reset password<span class="sr-only">, Tuple</span>
						</a>
						<a
							hx-delete={ "/users/" + strconv.FormatUint(user.ID, 10) }
							hx-target="#shellcontent"
							class="block px-3 py-1 text-sm/6 text-red-700 cursor-pointer hover:bg-neutral-300"
							@click="open=false"
							role="menuitem"
							tabindex="-1"
							id="options-menu-0-item-1"
						>
							Borrar Usuario<span class="sr-only">, Tuple</span>
						</a>
					</div>
				</div>
			</div>
		</div>
		<div class="flex divide-x divide-neutral-200">
			<!-- Reduced the divide-x value here -->
			for _, account := range user.Accounts {
				@UserAccount(account)
			}
		</div>
	</li>
}

templ UserAccount(account uimodels.UIaccount) {
	<div class="-my-3 divide-y w-full divide-gray-100 px-6 py-4 text-sm">
		<div class="flex justify-between gap-x-4 py-3 flex-wrap">
			<div class="flex flex-col gap-x-2">
				<dt class="text-gray-500 text-sm">{ account.AccountNumber }</dt>
				<dt class="text-gray-700 text-lg">{ account.AccountType }</dt>
			</div>
			<dd class="flex items-center gap-x-2">
				<div class="font-medium text-gray-900">{ account.Balance }</div>
				<!-- Conditional balance arrow -->
				if strings.Contains(account.Balance, "-") {
					<span class="h-6 w-6 shrink-0 material-symbols-rounded text-red-500">
						trending_down
					</span>
				} else if account.Balance == "$0.00" {
					<span class="h-6 w-6 shrink-0 material-symbols-rounded text-yellow-500">
						trending_flat
					</span>
				} else {
					<span class="h-6 w-6 shrink-0 material-symbols-rounded text-green-700">
						trending_up
					</span>
				}
			</dd>
		</div>
	</div>
}

templ UserListGrid(users []uimodels.UIuser) {
	<div class="flex gap-5 ">
		<div class="text-3xl ms-1 font-semibold text-neutral-900">Users</div>
		<button
			@click="overlayOpen=true"
			hx-get="/signup"
			hx-target="#overlayContent"
			type="button"
			class="max-sm:fixed max-sm:bottom-2 max-sm:right-2 max-sm:p-3 rounded-full p-1.5 w-auto bg-neutral-700 text-white shadow-sm hover:text-primary-400 hover:bg-neutral-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-600"
		>
			<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
			</svg>
		</button>
	</div>
	<ul role="list" class="grid grid-cols-1 mt-3 gap-6 sm:grid-cols-2 lg:grid-cols-3">
		for _, user := range users {
			@UserItem(user)
		}
	</ul>
}

templ PasswordReseted(newPassWord string) {
	<div class="flex flex-row gap-2 items-center justify-center">
		<p class="text-sm font-medium text-gray-900 ">Contrase√±a reseteada a </p>
		<p id="newPassWord" class="text-sm  font-bold text-neutral-800-900 ">{ newPassWord } </p>
		<span @click="copyToClipboard()" class="h-5 w-5 shrink-0 material-symbols-rounded text-neutral-700 cursor-pointer hover:text-primary-600">
			content_copy
		</span>
	</div>
	<script>
		function copyToClipboard() {
			const el = document.createElement('textarea');
			el.value = document.getElementById('newPassWord').innerText;
			document.body.appendChild(el);
			el.select();
			document.execCommand('copy');
			document.body.removeChild(el);
			alert('Copied to clipboard');
		}
	</script>
}
